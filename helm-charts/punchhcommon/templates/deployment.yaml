apiVersion: apps/v1
kind: Deployment
metadata:
  name: punchhcommon
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/version: {{ .Chart.Version }}
    app.kubernetes.io/part-of: {{ .Values.punchhcommon.kindofcomponent }}
spec:
  replicas: {{ .Values.punchhcommon.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.punchhcommon.maxSurge }}
      maxUnavailable: {{ .Values.punchhcommon.maxUnavailable }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/version: {{ .Chart.Version }}
      app.kubernetes.io/part-of: {{ .Values.punchhcommon.kindofcomponent }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/version: {{ .Chart.Version }}
        app.kubernetes.io/part-of: {{ .Values.punchhcommon.kindofcomponent }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.global.common.imagePullSecrets }}
      serviceAccountName: {{ .Values.punchhcommon.serviceaccount }}
      securityContext:
        {{- toYaml .Values.global.common.podSecurityContext | nindent 8 }}
      initContainers:
        - name: awscli-secret-manager
          image: docker.io/punchh/init-container-secrets-manager:v2
          imagePullPolicy: {{ .Values.global.common.pullPolicy }}
          command:
          - bash
          - /tmp/init.sh
          volumeMounts:
          - name: secret-vol
            mountPath: /mnt/
          env:
{{- range $key, $value := .Values.punchhcommon.initcontainer.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
{{- end }}
      containers:
        {{- if .Values.punchhcommon.sidecar }}
        - name: nginx
          image: punchh/k8s-nginx:2.0.0
          resources:
            limits:
              cpu: 256m
              memory: 256Mi
            requests:
              cpu: 256m
              memory: 256Mi
          ports:
           - name: nginx
             containerPort: 80
        {{- end }}
        - name: {{ .Values.punchhcommon.name }}
          securityContext:
            {{- toYaml .Values.global.common.securityContext | nindent 12 }}
          image: {{ .Values.images.punchhcommon }}:{{.Values.tags.punchhcommon}}
          {{- if .Values.punchhcommon.bash }}
          command: ["/bin/bash", "-c"]
          {{- else }}
          command: ["/bin/sh", "-c"]
          {{- end }}
          args: {{ .Values.punchhcommon.args }}
          imagePullPolicy: {{ .Values.global.common.pullPolicy }}
          volumeMounts:
          - name: secret-vol
            mountPath: /tmp/
          ports:
            - name: app
              containerPort: {{ .Values.punchhcommon.containerPort}}
              protocol: TCP
          {{- if and .Values.punchhcommon.healthcheck.enabled .Values.punchhcommon.service.restapi }}
          readinessProbe:
            httpGet:
              path: {{ .Values.punchhcommon.healthCheckPath }}
              port: {{ .Values.punchhcommon.containerPort}}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.global.common.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.global.common.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.global.common.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.global.common.readinessProbe.successThreshold }}
          livenessProbe:
            httpGet:
              path: {{ .Values.punchhcommon.healthCheckPath }}
              port: {{ .Values.punchhcommon.containerPort}}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.global.common.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.global.common.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.global.common.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.global.common.livenessProbe.successThreshold }}
          {{- end }}
          {{- if and .Values.punchhcommon.healthcheck.enabled .Values.punchhcommon.service.grpc }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.punchhcommon.containerPort}}
            initialDelaySeconds: {{ .Values.global.common.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.global.common.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.global.common.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.global.common.readinessProbe.successThreshold }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.punchhcommon.containerPort}}
            initialDelaySeconds: {{ .Values.global.common.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.global.common.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.global.common.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.global.common.livenessProbe.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.punchhcommon.resources | nindent 12 }}
          env:
{{- range $key, $value := .Values.global.common.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
{{- end }}
{{- range $key, $value := .Values.punchhcommon.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
{{- end }}
      volumes:
        - name: secret-vol
          emptyDir:
            medium: Memory
      {{- if .Values.punchhcommon.antiaffinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - {{ .Values.punchhcommon.name }}
            topologyKey: "kubernetes.io/hostname"
      {{- end }}
      nodeSelector:
        node_group_type: {{ .Values.punchhcommon.node_group_type }}
