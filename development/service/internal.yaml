apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/group.name: sandbox-internal
    alb.ingress.kubernetes.io/healthcheck-path: /ping
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:465377470325:certificate/05dc18c5-7cb2-4170-af3b-0c6590149b73
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/tags: Environment=Production,Team=DevOps
  name: internal
  namespace: service
spec:
  rules:
  - host: aegaeonoutbound.punchh.internal
    http:
      paths:
      - backend:
          serviceName: aegaeonoutbound
          servicePort: 80

  - host: aegaeonemail.punchh.internal
    http:
      paths:
      - backend:
          serviceName: aegaeonemail
          servicePort: 80

  - host: aegaeonmessaging.punchh.internal
    http:
      paths:
      - backend:
          serviceName: aegaeonmessaging
          servicePort: 80

--- 

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/group.name: sandbox-internal
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/tags: Environment=Production,Team=DevOps
  name: schemaregistry
  namespace: infra
spec:
  rules:
  - host: kafka-schema-registry.punchh.internal
    http:
      paths:
      - backend:
          serviceName: schemaregistry
          servicePort: 80

        